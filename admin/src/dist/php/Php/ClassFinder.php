<?phpnamespace FwHelpers\Classes;use RegexIterator;use ReflectionClass;use RecursiveIteratorIterator;use RecursiveDirectoryIterator;class ClassFinder {	protected $classes = [];		public function __construct() {		$this->classes = array_filter(			get_declared_classes(),			function ($className) {				return !call_user_func(					[new ReflectionClass($className), 'isInternal']				);			}		);	}		public function classesWithTrait(string $trait,array $classList = NULL) {		if ($classList){			$this->classes = $classList;		}		return array_filter(			$this->classes,			function($className) use($trait) {				$traits = class_uses($className);				return isset($traits[$trait]);			}		);	}	public static function classesInDirectory(string $directory, string $namespace) {		$output = [];		foreach (new RegexIterator(new RecursiveIteratorIterator(new RecursiveDirectoryIterator($directory)), '/\.php$/') as $phpFile) {			$fileName = $namespace.'\\'.strtok($phpFile->getFileName(),'.');			if (class_exists($fileName)){				$output[] = $fileName;			}		}		return $output;	}}