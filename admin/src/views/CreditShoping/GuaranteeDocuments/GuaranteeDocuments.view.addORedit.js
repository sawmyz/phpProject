// $(function () {//$("[id^='tab_']").each(function () {    let id = $(this).attr('id');    id = id.split('_')[1];    if (id > 1) {        $(this).hide();    }});$("#next").on('click', function () {    $("[id^='tab_']").each(function () {        if ($(this).is(':visible')) {            let id = $(this).attr('id');            id = parseInt(id.split('_')[1]);            function callCallback() {                $(`#tab_${id}`).attr('submitted', 'true').hide();                $(`#tab_${id + 1}`).show();                if (id > 1) {                    $("#prev").show();                }            }            if (id !== 10) {                submitTab(id, callCallback,);            } else {  //مرحله اخر                submitTab(id, callCallback,);                $("#next").hide();                $("#sabt").show();            }            return false;        }    });});$("#prev").on('click', function () {    $("[id^='tab_']").each(function () {        if ($(this).is(':visible')) {            let id = $(this).attr('id');            id = parseInt(id.split('_')[1]);            $(this).hide();            $(`#tab_${id - 1}`).show()            if ((id - 1) === 1) {                $("#prev").hide();            }            return false;        }    });});function submitTab(tabId, callback,) {    const sendObject = {};    let isInvalid = false;    $(`#tab_${tabId}`).find('input').each(async function () {        let name = $(this).attr('name');        if ($(this).attr('type') == 'file') {            const res = $(this).parents('.form-group').find('img').attr('src');            let blob = await fetch(res).then(r => r.blob());            let reader = new FileReader();            reader.readAsDataURL(blob);            reader.onloadend = function () {                sendObject[name] = reader.result;                console.log(sendObject)            }        } else {            if ($(this).is(':visible')) {                if ($(this).attr('required') !== null && $(this).val().toString().length === 0) {                    if ($(this).attr('disabled') !== 'disabled') {                        $(this).addClass('is-invalid');                        isInvalid = true;                    }                } else {                    sendObject[name] = $(this).val();                }            } else if ($(this).attr('type') == 'hidden') {                sendObject[name] = $(this).val();            }        }    });    $(`#tab_${tabId}`).find('select').each(async function () {        let name = $(this).attr('name');        if ($(this).val() > 0) {            sendObject[name] = $(this).val();        }    });    sendObject['controller_type'] = 'wizardAdd';    if ($(`#tab_${tabId}`).attr('submitted') == 'true') {        sendObject['controller_type'] = 'wizardEdit';    }    if (isInvalid) {        Swal.fire({            icon: 'error',            title: "خطا!",            text: "لطفا تمامی فیلد های لازم را پر کردن را پر کنید",            showConfirmButton: false,            showCloseButton: true,        })    } else {        setTimeout(() => {            $.ajax({                success: res => {                    if (res > 0) {                        if (tabId == 1) {                            $("input[name='guarantee_documents_id']").val(`${res}`);                        }                        callback();                    } else {                        Swal.fire({                            icon: 'error',                            title: "خطا!",                            text: "ثبت اطلاعات با خطا مواجه شد.",                            showConfirmButton: false,                            showCloseButton: true,                        })                    }                },                url: stepGenerator(tabId),                type: 'post',                data: sendObject,            });        }, 500)    }}function stepGenerator(tabId) {    switch (tabId) {        case 1:            return "controllers/CreditShoping/GuaranteeDocuments/GuaranteeDocuments"        case 2:            return "controllers/CreditShoping/GuaranteeBirthCertificate/GuaranteeBirthCertificate"        case 3:            return "controllers/CreditShoping/GuaranteeNationalCard/GuaranteeNationalCard"        case 4:            return "controllers/CreditShoping/GuaranteeCertificateRights/GuaranteeCertificateRights"        case 5:            return "controllers/CreditShoping/GuaranteeContracts/GuaranteeContracts"        case 6:            return "controllers/CreditShoping/GuaranteeChecks/GuaranteeChecks"        case 7:            return "controllers/CreditShoping/GuaranteePromissory/GuaranteePromissory"        case 8:            return "controllers/CreditShoping/GuaranteeGuarantorChecks/GuaranteeGuarantorChecks"        case 9:            return "controllers/CreditShoping/GuaranteeIdentitys/GuaranteeIdentitys"        case 10:            return "controllers/CreditShoping/GuaranteeGuarantorRightsCertificates/GuaranteeGuarantorRightsCertificates"    }}////////////////////////////////////////////////////////////////////////////////////////////////$("#birth_certificate_date").persianDatepicker();$("#national_card_expiration").persianDatepicker();$("#certificate_rights_date_from").persianDatepicker();$("#certificate_rights_date_to").persianDatepicker();$("#contract_date").persianDatepicker();$("#guarantor_rights_certificate_date_to").persianDatepicker();$("#guarantor_rights_certificate_date_from").persianDatepicker();$("#check_date").persianDatepicker();$("#promissory_date").persianDatepicker();$("#guarantor_check_date").persianDatepicker();$("#national_card_number").checkNationalCode();$("#guarantor_rights_certificate_national_code").checkNationalCode();// $("#guarantor_rights_certificate_national_code").checkNationalCode();$('#check_price').attr('readonly', true);$('#promissory_price').attr('readonly', true);// ///// get file details ////////$('#credit_file_id').on('change', function () {    let value = $(this).val();    $.ajax({        url: 'controllers/CreditShoping/CreditFile/CreditFile',        type: 'post',        data: {            controller_type: 'getFileDetails',            fileId: value,        },        success: res => {            let data = JSON.parse(res);            $('#credit_file_requested_credit').val(data.requested);            $('#grant_purchase_credit_price').val(data.requested);            $('#credit_file_refund').val(data.refund);            $('#credit_file_monthly_profit').val(data.monthly);            $('#credit_file_payment_amount').val(data.amount);            $('#credit_file_guaranteed_check').val(data.check);            $('#credit_file_filenumber').val(data.filenumber);            $('#customer_id').val(data.customer);            $('#check_price').val(data.check);            $('#promissory_price').val(data.check);            $('#promissory_exporter_name').val(data.name);            $('#check_account_owner').val(data.name);        },    })    //    // $('#guarantor_account_owner').val($("#credit_file_id").data('name'));    // $('#promissory_exporter_name').val(data.name);    // alert($(this).data('name'))    // $("#credit_file_guaranteed_check").val($('#credit_file_payment_amount').val(data.amount))})////// })