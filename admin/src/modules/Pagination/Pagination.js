class PaginationClass {    constructor() {        this.searchElement = $(".fwPaginationLimit")        this.paginationBox = $(".fwPaginationBox")        this.path = 'notFound';    }    currentPath(value){        this.path = value;    }    onPageChanged = (pageNum) => {    }    onLimitChanged = (limit) => {    }    paginate() {        $.count()        this.searchElement = $(".fwPaginationLimit");        this.paginationBox = $(".fwPaginationBox");        const instance = this;        $(this.searchElement).on('change',function () {            instance.changeLimit($(this).val())        });        $.ajax({            url: instance.path,            type: "POST",            data: {                controller_type: 'fwPagination_getPaginationInfo',            },            success: res => {                let limit, currentPage, totalPages;                try {                    if (res.isOk) {                        limit = res.limit;                        currentPage = res.currentPage;                        totalPages = res.totalPages;                        if ($(instance.searchElement).data('select2')) {                            $(instance.searchElement).select2('destroy');                        }                        $(instance.searchElement).find(`option[value=${limit}]`).attr('selected', true).prop('selected', true)                        $(instance.searchElement).select2();                        $(instance.paginationBox).empty();                        $(instance.paginationBox).append(`<li class="page-item previous ${(totalPages - currentPage) === totalPages ? 'disabled' : ''}"><a data-num="${currentPage}" class="page-link fwPaginationPageLink" href="#">قبلی</a></li>`);                        for (let i = 1; i <= totalPages; i++) {                            $(instance.paginationBox).append(`<li class="page-item ${(currentPage + 1) === i ? 'active ' : ''}"><a data-num="${i}" class="page-link fwPaginationPageLink" href="#">${i}</a></li>`);                        }                        $(instance.paginationBox).append(`<li class="page-item next ${currentPage + 1 === totalPages ? 'disabled' : ''}"><a class="page-link fwPaginationPageLink" data-num="${currentPage + 2}" href="#">بعدی</a></li>`);                    } else {                        console.error(`The controller present at ${instance.path} is not using the ControllerPagination trait, hence it can't return the needed info for paginating`)                    }                } catch (e) {                    console.error('error')                }            }        });    }    goToNthPage(num) {        $.loader();        const instance = this;        $.ajax({            url: instance.path,            type: "POST",            data: {                controller_type: 'fwPagination_goToNthPage',                num: num - 1,            },            success: res => {                $.loader();                $("#fw-content").html(res);                instance.onPageChanged(num);            }        });    }    changeLimit(num) {        const instance = this;        $.loader();        $.ajax({            url: instance.path,            type: "POST",            data: {                controller_type: 'fwPagination_changeLimit',                limit: num,            },            success: res => {                $.loader();                $("#fw-content").html(res);                instance.onLimitChanged(num);            }        });    }}export const Pagination = new PaginationClass();$(document).on('click', '.fwPaginationPageLink', function (e) {    e.preventDefault();    if (!$(this).hasClass('active')) {        Pagination.goToNthPage($(this).data('num'));    }});